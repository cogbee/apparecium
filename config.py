ENABLE_EXTERNAL_PATHS = False

SOURCE_DEFINITION = ['Landroid/telephony/TelephonyManager;->getDeviceId(', 
'Landroid/telephony/TelephonyManager;->getSubscriberId(', 
'Landroid/telephony/TelephonyManager;->getSimSerialNumber(', 
'Landroid/telephony/TelephonyManager;->getLine1Number(']
#[
#	'Landroid/accounts/AccountManager;->getAccounts(',
#	'Landroid/app/Activity;->findViewById(',
#	'Landroid/app/Activity;->getIntent(',
#	'Landroid/app/Activity;->onActivityResult(',
#	'Landroid/app/PendingIntent;->getActivity(',
#	'Landroid/app/PendingIntent;->getBroadcast(',
#	'Landroid/app/PendingIntent;->getService(',
#	'Landroid/bluetooth/BluetoothAdapter;->getAddress(',
#	'Landroid/content/ContentResolver;->query(',
#	'Landroid/content/pm/PackageManager;->getInstalledApplications(',
#	'Landroid/content/pm/PackageManager;->getInstalledPackages(',
#	'Landroid/content/pm/PackageManager;->queryBroadcastReceivers(',
#	'Landroid/content/pm/PackageManager;->queryContentProviders(',
#	'Landroid/content/pm/PackageManager;->queryIntentActivities(',
#	'Landroid/content/pm/PackageManager;->queryIntentServices(',
#	'Landroid/content/SharedPreferences;->getDefaultSharedPreferences(',
#	'Landroid/database/Cursor;->getString(',
#	'Landroid/database/sqlite/SQLiteDatabase;->query(',
#	'Landroid/location/Location;->getLatitude(',
#	'Landroid/location/Location;->getLongitude(',
#	'Landroid/location/LocationManager;->getLastKnownLocation(',
#	'Landroid/media/AudioRecord;->read(',
#	'Landroid/net/wifi/WifiInfo;->getMacAddress(',
#	'Landroid/net/wifi/WifiInfo;->getSSID(',
#	'Landroid/os/Bundle;->get(',
#	'Landroid/os/Bundle;->getBoolean(',
#	'Landroid/os/Bundle;->getBooleanArray(',
#	'Landroid/os/Bundle;->getBundle(',
#	'Landroid/os/Bundle;->getByte(',
#	'Landroid/os/Bundle;->getByteArray(',
#	'Landroid/os/Bundle;->getChar(',
#	'Landroid/os/Bundle;->getCharArray(',
#	'Landroid/os/Bundle;->getCharSequence(',
#	'Landroid/os/Bundle;->getCharSequenceArray(',
#	'Landroid/os/Bundle;->getCharSequenceArrayList(',
#	'Landroid/os/Bundle;->getClassLoader(',
#	'Landroid/os/Bundle;->getDouble(',
#	'Landroid/os/Bundle;->getDoubleArray(',
#	'Landroid/os/Bundle;->getFloat(',
#	'Landroid/os/Bundle;->getFloatArray(',
#	'Landroid/os/Bundle;->getInt(',
#	'Landroid/os/Bundle;->getIntArray(',
#	'Landroid/os/Bundle;->getIntegerArrayList(',
#	'Landroid/os/Bundle;->getLong(',
#	'Landroid/os/Bundle;->getLongArray(',
#	'Landroid/os/Bundle;->getParcelable(',
#	'Landroid/os/Bundle;->getParcelableArray(',
#	'Landroid/os/Bundle;->getParcelableArrayList(',
#	'Landroid/os/Bundle;->getSerializable(',
#	'Landroid/os/Bundle;->getShort(',
#	'Landroid/os/Bundle;->getShortArray(',
#	'Landroid/os/Bundle;->getSparseParcelableArray(',
#	'Landroid/os/Bundle;->getString(',
#	'Landroid/os/Bundle;->getStringArrayList(',
#	'Landroid/os/Handler;->obtainMessage(',
#	'Landroid/provider/Browser;->getAllBookmarks(',
#	'Landroid/provider/Browser;->getAllVisitedUrls(',
#	'Landroid/telephony/gsm/GsmCellLocation;->getCid(',
#	'Landroid/telephony/gsm/GsmCellLocation;->getLac(',
#	'Landroid/telephony/TelephonyManager;->getDeviceId(',
#	'Landroid/telephony/TelephonyManager;->getLine1Number(',
#	'Landroid/telephony/TelephonyManager;->getSimSerialNumber(',
#	'Landroid/telephony/TelephonyManager;->getSubscriberId(',
#	'Ljava/net/URLConnection;->getInputStream(',
#	'Ljava/net/URLConnection;->getOutputStream(',
#	'Ljava/net/URL;->openConnection(',
#	'Ljava/util/Calendar;->getTimeZone(',
#	'Ljava/util/Locale;->getCountry(',
#	'Lorg/apache/http/HttpResponse;->getEntity(',
#	'Lorg/apache/http/util/EntityUtils;->getContentCharSet(',
#	'Lorg/apache/http/util/EntityUtils;->toByteArray(',
#	'Lorg/apache/http/util/EntityUtils;->toString(',
#]# SINKS taken from the flowdroid
SINK_DEFINITION = ['Landroid/util/Log;->d(', 
'Landroid/util/Log;->e(', 
'Landroid/util/Log;->i(', 
'Landroid/util/Log;->v(', 
'Landroid/util/Log;->w(', 
'Landroid/util/Log;->wtf(',
'Ljava.io.OutputStream;->write('
]

#[
#	'Landroid/app/Activity;->bindService(',
#	'Landroid/app/Activity;->sendBroadcast(',
#	'Landroid/app/Activity;->sendBroadcastAsUser(',
#	'Landroid/app/Activity;->sendOrderedBroadcast(',
#	'Landroid/app/Activity;->sendOrderedBroadcastAsUser(',
#	'Landroid/app/Activity;->sendStickyBroadcast(',
#	'Landroid/app/Activity;->sendStickyBroadcastAsUser(',
#	'Landroid/app/Activity;->sendStickyOrderedBroadcast(',
#	'Landroid/app/Activity;->sendStickyOrderedBroadcastAsUser(',
#	'Landroid/app/Activity;->setResult(',
#	'Landroid/app/Activity;->startActivities(',
#	'Landroid/app/Activity;->startActivity(',
#	'Landroid/app/Activity;->startActivityForResult(',
#	'Landroid/app/Activity;->startActivityFromChild(',
#	'Landroid/app/Activity;->startActivityFromFragment(',
#	'Landroid/app/Activity;->startActivityIfNeeded(',
#	'Landroid/app/Activity;->startService(',
#	'Landroid/content/ContentResolver;->delete(',
#	'Landroid/content/ContentResolver;->insert(',
#	'Landroid/content/ContentResolver;->query(',
#	'Landroid/content/ContentResolver;->update(',
#	'Landroid/content/Context;->bindService(',
#	'Landroid/content/Context;->registerReceiver(',
#	'Landroid/content/Context;->sendBroadcast(',
#	'Landroid/content/Context;->startActivities(',
#	'Landroid/content/Context;->startActivity(',
#	'Landroid/content/Context;->startService(',
#	'Landroid/content/IntentFilter;->addAction(',
#	'Landroid/content/Intent;->setAction(',
#	'Landroid/content/Intent;->setClassName(',
#	'Landroid/content/Intent;->setComponent(',
#	'Landroid/content/SharedPreferences$Editor;->putBoolean(',
#	'Landroid/content/SharedPreferences$Editor;->putFloat(',
#	'Landroid/content/SharedPreferences$Editor;->putInt(',
#	'Landroid/content/SharedPreferences$Editor;->putLong(',
#	'Landroid/content/SharedPreferences$Editor;->putString(',
#	'Landroid/media/MediaRecorder;->setPreviewDisplay(',
#	'Landroid/media/MediaRecorder;->setVideoSource(',
#	'Landroid/media/MediaRecorder;->start(',
#	'Landroid/os/Bundle;->putAll(',
#	'Landroid/os/Bundle;->putBinder(',
#	'Landroid/os/Bundle;->putBoolean(',
#	'Landroid/os/Bundle;->putBooleanArray(',
#	'Landroid/os/Bundle;->putBundle(',
#	'Landroid/os/Bundle;->putByte(',
#	'Landroid/os/Bundle;->putByteArray(',
#	'Landroid/os/Bundle;->putChar(',
#	'Landroid/os/Bundle;->putCharArray(',
#	'Landroid/os/Bundle;->putCharSequence(',
#	'Landroid/os/Bundle;->putCharSequenceArray(',
#	'Landroid/os/Bundle;->putCharSequenceArrayList(',
#	'Landroid/os/Bundle;->putDouble(',
#	'Landroid/os/Bundle;->putDoubleArray(',
#	'Landroid/os/Bundle;->putFloat(',
#	'Landroid/os/Bundle;->putFloatArray(',
#	'Landroid/os/Bundle;->putInt(',
#	'Landroid/os/Bundle;->putIntArray(',
#	'Landroid/os/Bundle;->putIntegerArrayList(',
#	'Landroid/os/Bundle;->putLong(',
#	'Landroid/os/Bundle;->putLongArray(',
#	'Landroid/os/Bundle;->putParcelable(',
#	'Landroid/os/Bundle;->putParcelableArray(',
#	'Landroid/os/Bundle;->putParcelableArrayList(',
#	'Landroid/os/Bundle;->putSerializable(',
#	'Landroid/os/Bundle;->putShort(',
#	'Landroid/os/Bundle;->putShortArray(',
#	'Landroid/os/Bundle;->putSparseParcelableArray(',
#	'Landroid/os/Bundle;->putString(',
#	'Landroid/os/Bundle;->putStringArray(',
#	'Landroid/os/Bundle;->putStringArrayList(',
#	'Landroid/os/Handler;->sendMessage(',
#	'Landroid/telephony/SmsManager;->sendDataMessage(',
#	'Landroid/telephony/SmsManager;->sendMultipartTextMessage(',
#	'Landroid/telephony/SmsManager;->sendTextMessage(',
#	'Landroid/util/Log;->d(',
#	'Landroid/util/Log;->e(',
#	'Landroid/util/Log;->i(',
#	'Landroid/util/Log;->v(',
#	'Landroid/util/Log;->w(',
#	'Landroid/util/Log;->wtf(',
#	'Ljava/io/FileOutputStream;->write(',
#	'Ljava/io/OutputStream;->write(',
#	'Ljava/io/Writer;->write(',
#	'Ljava/net/Socket;->connect(',
#	'Ljava/net/URLConnection;->setRequestProperty(',
#	'Ljava/net/URL;-><init>(',
#	'Ljava/net/URL;->set(',
#	'Lorg/apache/http/client/HttpClient;->execute(',
#	'Lorg/apache/http/impl/client/DefaultHttpClient;->execute(',
#	'Lorg/apache/http/message/BasicNameValuePair;-><init>('
#]


NOPS = ['return-void',
	'return',
	'return-wide',
	'return-object',
	'monitor-exit',
	'monitor-enter',  
	'move-exception', #only for backward analysis. in forward, this can be a tainting propagation, and will be checked!
	'check-cast',
	'instance-of',
	'array-length', #@todo: hidden propagation?
	'goto',
	'goto/16',
	'goto/32',
	'packed-switch', #@todo: hidden propagation?
	'sparse-switch', #@todo: hidden propagation?
	'cmpl-float',
	'cmpg-float',
	'cmpl-double',
	'cmpg-double',
	'cmp-long',
	'if-eq',
	'if-ne',
	'if-lt',
	'if-ge',
	'if-gt',
	'if-le',
	'if-eqz',
	'if-nez',
	'if-ltz',
	'if-gez',
	'if-gtz',
	'if-lez'
]
UNTAINT = ['const/4', 
   'const/16',
   'const',
   'const/high16',
   'const-wide/16',
   'const-wide/32',
   'const-wide',
   'const-wide/high16',
   'const-string',
   'const-string/jumbo',
   'const-class',
   'new-instance', #what if the init taints THIS? -> then init is called afterwards!
   'new-array',
   'fill-array-data' #@sketchy
]
INSTRUCTION_PROPAGATION = { # if key is the instruction:
	# taint all variables in value[1] (0-indexed, 0 could be target!)
	# IF at least one entry in value[0] is tainted after this line
	'move': [[0], [1]],
	'move/from16': [[0], [1]],
	'move-wide': [[0], [1]],
	'move-wide/from16': [[0], [1]],
	'move-object': [[0], [1]],
	'move-object/from16': [[0], [1]],
	'aget': [[0], [1]],
	'aget-wide': [[0], [1]], #@todo: does not taint the index!
	'aget-object': [[0], [1]],
	'aget-boolean': [[0], [1]],
	'aget-byte': [[0], [1]],
	'aget-char': [[0], [1]],
	'aget-short': [[0], [1]],
	'aput': [[1], [0]],
	'aput-wide': [[1], [0]],
	'aput-object': [[1], [0]],
	'aput-boolean': [[1], [0]],
	'aput-byte': [[1], [0]],
	'aput-char': [[1], [0]],
	'aput-short': [[1], [0]],
	'neg-int': [[0], [1]],
	'not-int': [[0], [1]],
	'neg-long': [[0], [1]],
	'not-long': [[0], [1]],
	'neg-float': [[0], [1]],
	'not-float': [[0], [1]],
	'neg-double': [[0], [1]],
	'not-double': [[0], [1]],
	'int-to-long': [[0], [1]],
	'int-to-float': [[0], [1]],
	'int-to-double': [[0], [1]],
	'long-to-int': [[0], [1]],
	'long-to-float': [[0], [1]],
	'long-to-double': [[0], [1]],
	'float-to-int': [[0], [1]],
	'float-to-long': [[0], [1]],
	'float-to-double': [[0], [1]],
	'double-to-int': [[0], [1]],
	'double-to-long': [[0], [1]],
	'double-to-float': [[0], [1]],
	'int-to-byte': [[0], [1]],
	'int-to-char': [[0], [1]],
	'int-to-short': [[0], [1]],
	'add-int': [[0], [1, 2]],
	'sub-int': [[0], [1, 2]],
	'rsub-int': [[0], [1, 2]],
	'mul-int': [[0], [1, 2]],
	'div-int': [[0], [1, 2]],
	'rem-int': [[0], [1, 2]],
	'and-int': [[0], [1, 2]],
	'or-int': [[0], [1, 2]],
	'xor-int': [[0], [1, 2]],
	'shl-int': [[0], [1, 2]],
	'shr-int': [[0], [1, 2]],
	'ushr-int': [[0], [1, 2]],
	'add-long': [[0], [1, 2]],
	'sub-long': [[0], [1, 2]],
	'mul-long': [[0], [1, 2]],
	'div-long': [[0], [1, 2]],
	'rem-long': [[0], [1, 2]],
	'and-long': [[0], [1, 2]],
	'or-long': [[0], [1, 2]],
	'xor-long': [[0], [1, 2]],
	'shl-long': [[0], [1, 2]],
	'shr-long': [[0], [1, 2]],
	'ushr-long': [[0], [1, 2]],
	'add-float': [[0], [1, 2]],
	'sub-float': [[0], [1, 2]],
	'mul-float': [[0], [1, 2]],
	'div-float': [[0], [1, 2]],
	'rem-float': [[0], [1, 2]],
	'add-double': [[0], [1, 2]],
	'sub-double': [[0], [1, 2]],
	'mul-double': [[0], [1, 2]],
	'div-double': [[0], [1, 2]],
	'rem-double': [[0], [1, 2]],
	'add-int/2addr': [[0],[0, 1]],
	'sub-int/2addr': [[0],[0, 1]],
	'mul-int/2addr': [[0],[0, 1]],
	'div-int/2addr': [[0],[0, 1]],
	'rem-int/2addr': [[0],[0, 1]],
	'and-int/2addr': [[0],[0, 1]],
	'or-int/2addr': [[0],[0, 1]],
	'xor-int/2addr': [[0],[0, 1]],
	'shl-int/2addr': [[0],[0, 1]],
	'shr-int/2addr': [[0],[0, 1]],
	'ushr-int/2addr': [[0],[0, 1]],
	'add-long/2addr': [[0],[0, 1]],
	'sub-long/2addr': [[0],[0, 1]],
	'mul-long/2addr': [[0],[0, 1]],
	'div-long/2addr': [[0],[0, 1]],
	'rem-long/2addr': [[0],[0, 1]],
	'and-long/2addr': [[0],[0, 1]],
	'or-long/2addr': [[0],[0, 1]],
	'xor-long/2addr': [[0],[0, 1]],
	'shl-long/2addr': [[0],[0, 1]],
	'shr-long/2addr': [[0],[0, 1]],
	'ushr-long/2addr': [[0],[0, 1]],
	'add-float/2addr': [[0],[0, 1]],
	'sub-float/2addr': [[0],[0, 1]],
	'mul-float/2addr': [[0],[0, 1]],
	'div-float/2addr': [[0],[0, 1]],
	'rem-float/2addr': [[0],[0, 1]],
	'add-double/2addr': [[0],[0, 1]],
	'sub-double/2addr': [[0],[0, 1]],
	'mul-double/2addr': [[0],[0, 1]],
	'div-double/2addr': [[0],[0, 1]],
	'rem-double/2addr': [[0],[0, 1]],
	'add-int/lit8': [[0], [1]],
	'sub-int/lit8': [[0], [1]],
	'rsub-int/lit8': [[0], [1]],
	'mul-int/lit8': [[0], [1]],
	'div-int/lit8': [[0], [1]],
	'rem-int/lit8': [[0], [1]],
	'and-int/lit8': [[0], [1]],
	'or-int/lit8': [[0], [1]],
	'xor-int/lit8': [[0], [1]],
	'shl-int/lit8': [[0], [1]],
	'shr-int/lit8': [[0], [1]],
	'ushr-int/lit8': [[0], [1]],
	'add-int/lit16': [[0], [1]],
	'sub-int/lit16': [[0], [1]],
	'rsub-int/lit16': [[0], [1]],
	'mul-int/lit16': [[0], [1]],
	'div-int/lit16': [[0], [1]],
	'rem-int/lit16': [[0], [1]],
	'and-int/lit16': [[0], [1]],
	'or-int/lit16': [[0], [1]],
	'xor-int/lit16': [[0], [1]],
	'shl-int/lit16': [[0], [1]],
	'shr-int/lit16': [[0], [1]],
	'ushr-int/lit16': [[0], [1]],
	#the following are only available in optimized dex files
	#execute-inline
	#invoke-*-quick
	#iput/get - quick
}


## [
##      'Landroid/telephony/TelephonyManager;->getDeviceId(', 
##      'Landroid/telephony/TelephonyManager;->getLine1Number(', 
##      'Landroid/telephony/TelephonyManager;->getSubscriberId(', 
##      'Landroid/telephony/TelephonyManager;->getCellLocation('
##  ],
##                                                # SINKS taken from the permissionmap, for PERMISSION_INTERNET
##                                                [
##      'Landroid/webkit/WebSettings;->setBlockNetworkLoads(', 
##      'Landroid/webkit/WebSettings;->verifyNetworkAccess(', 
##      'Landroid/webkit/WebView;-><init>(', 
##      'Landroid/webkit/WebViewCore;-><init>(', 
##      'Lcom/android/http/multipart/FilePart;->sendData(', 
##      'Lcom/android/http/multipart/FilePart;->sendDispositionHeader(', 
##      'Lcom/android/http/multipart/Part;->send(', 
##      'Lcom/android/http/multipart/Part;->sendStart(', 
##      'Lcom/android/http/multipart/Part;->sendTransferEncodingHeader(', 
##      'Lcom/android/http/multipart/StringPart;->sendData(', 
##      'Ljava/net/DatagramSocket;-><init>(', 
##      'Ljava/net/HttpURLConnection;-><init>(', 
##      'Ljava/net/HttpURLConnection;->connect(', 
##      'Ljava/net/MulticastSocket;-><init>(', 
##      'Ljava/net/NetworkInterface;-><init>(', 
##      'Ljava/net/ServerSocket;-><init>(', 
##      'Ljava/net/ServerSocket;->bind(', 
##      'Ljava/net/Socket;-><init>(', 
##      'Ljava/net/URL;->getContent(', 
##      'Ljava/net/URL;->openConnection(', 
##      'Ljava/net/URL;->openStream(', 
##      'Ljava/net/URLConnection;->connect(', 
##      'Ljava/net/URLConnection;->getInputStream(', 
##      'Lorg/apache/http/impl/client/DefaultHttpClient;-><init>(', 
##      'Lorg/apache/http/impl/client/DefaultHttpClient;->execute(', 
##      'Ljava/io/OutputStream;->write(', 
##'      Lorg/apache/http/impl/client/HttpClient;->execute']) 